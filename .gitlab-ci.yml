stages:
  - synchronize
  - upload

# synchronize:coreye:
#   stage: synchronize
#   image: curlimages/curl
#   script:
#     - echo "Job temporary disable (enable when migration from Github is over)"
#     #- |-
#     #  if [ "${CI_COMMIT_REF_NAME}" = "master" ]
#     #  then
#     #    curl -X POST
#     #      -F token=mySecretToken
#     #      -F ref=coog-${CURRENT_DEV_VERSION}
#     #      -F "variables[IMAGE_TAG]=date +\"coog-${CURRENT_DEV_VERSION}.%y%V\""
#     #      -F "variables[IMAGE_NAME]=coog"
#     #      https://git.coreye.fr/api/v4/projects/434/trigger/pipeline
#     #  else
#     #    curl -X POST
#     #      -F token=mySecretToken
#     #      -F ref=${CI_COMMIT_REF_NAME}
#     #      -F "variables[IMAGE_TAG]=date +\"${CI_COMMIT_REF_NAME}.%y%V\""
#     #      -F "variables[IMAGE_NAME]=coog"
#     #      https://git.coreye.fr/api/v4/projects/434/trigger/pipeline
#     #  fi
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'

synchronize:pipeline:
  stage: synchronize
  image: bitnami/git:latest
  variables:
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "${CI_SERVER_HOST}" >>~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" >~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "🤖 GitLab CI/CD 🤖"
    - git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
    - git fetch --all
  script:
    - |-
      for BRANCH in $(git ls-remote --refs -h origin -l "coog-*" | cut -s -d '/' -f3 | grep -E "^(coog-[[:digit:]]{1}).([[:digit:]]{1,}(([r][c])([[:digit:]]{1,}))?)$" )
      do
        git checkout "${BRANCH}"
        git checkout "${CI_COMMIT_SHORT_SHA}" .gitlab-ci.yml
        git commit -m "Merge .gitlab-ci.yml from \"${CI_COMMIT_SHORT_SHA}\""
      done
      git push --all
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      changes:
        - ".gitlab-ci.yml"

upload:helm-chart:
  stage: upload
  image:
    name: alpine/helm
    entrypoint: [""] # avoid error message on start : Error: unknown command "sh" for "helm"
  variables:
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - apk add --no-cache curl yq jq git openssh-client
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    - git config --global user.email "${GITLAB_USER_EMAIL}" &&
      git config --global user.name "🤖 GitLab CI/CD 🤖" &&
      git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
  script:
    - |-
      for HELM_PROJECT in $(find . -mindepth 1 -maxdepth 1 -type d ! -name ".git" -exec basename {} \;)
      do
        export HELM_PROJECT_VERSION="$(yq e '.version' "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml")"
        if [ -f "${CI_PROJECT_DIR}/${HELM_PROJECT}/Chart.yaml" ]
        then
          if [[ $(curl -s --fail --header --request GET --user gitlab-ci-token:${CI_JOB_TOKEN} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?package_type=helm&package_name=${HELM_PROJECT}" | jq -r --arg JQVERSION "${HELM_PROJECT_VERSION}" '.[] | select( .version == $JQVERSION ) | .version') ]]
          then
            echo "Helm package ${HELM_PROJECT}-${HELM_PROJECT_VERSION} already exists."
          else
            if [ $(git tag -l "${HELM_PROJECT}-${HELM_PROJECT_VERSION}") ]
            then
              echo "TAG ${HELM_PROJECT}-${HELM_PROJECT_VERSION} already exists"
            else
              if [[ -e "${HELM_PROJECT}/values_secrets.yaml" ]]; then
                helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/values.yaml" -f "${HELM_PROJECT}/values_secrets.yaml"
                helm template -f "${HELM_PROJECT}/values.yaml" -f "${HELM_PROJECT}/values_secrets.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
              else
                helm lint "${HELM_PROJECT}" -f "${HELM_PROJECT}/values.yaml"
                helm template -f "${HELM_PROJECT}/values.yaml" "${HELM_PROJECT}" > "${HELM_PROJECT}.template"
              fi
              git tag -a ${HELM_PROJECT}-${HELM_PROJECT_VERSION} -m "Create TAG ${HELM_PROJECT}-${HELM_PROJECT_VERSION}"
              git push --tags
              helm dependency update ${HELM_PROJECT} || true
              helm package ${HELM_PROJECT}
              helm repo index --url "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable" .
              echo "HELM_NEW_CHART=true" > upload.env
            curl -s --fail --request POST --user gitlab-ci-token:${CI_JOB_TOKEN} --form "chart=@${HELM_PROJECT}-${HELM_PROJECT_VERSION}.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
            fi
          fi
        else
          echo "Directory ${HELM_PROJECT} doesn't have Chart.yaml"
        fi
      done
  artifacts:
    expire_in: 5 days
    paths:
      - "*.template"
    reports:
      dotenv: upload.env
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"'
      changes:
        - "**/Chart.yaml"
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_PROTECTED == "true"'

upload:readme:
  stage: upload
  image: golang:alpine
  variables:
    GO111MODULE: "on"
    REPOSITORY_SSH_KEY: "${SSH_KEY}"
  before_script:
    - apk add --no-cache python3 git openssh-client
    - go install github.com/norwoodj/helm-docs/cmd/helm-docs
    - pip install pre-commit
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - echo "${REPOSITORY_SSH_KEY}" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    - git config --global user.email "${GITLAB_USER_EMAIL}" &&
      git config --global user.name "🤖 GitLab CI/CD 🤖" &&
      git remote set-url origin git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git
  script:
    - pre-commit install
    - pre-commit install-hooks
    - helm-docs
    - git commit -am "Generate README for charts with helm-docs"
    - git push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"'
      changes:
        - "**/Chart.yaml"
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_PROTECTED == "true"'
  needs:
    - upload:helm-chart